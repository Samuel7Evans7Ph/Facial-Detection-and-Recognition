{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Samuel7Evans7Ph/Facial-Detection-and-Recognition/blob/master/Face_Recognition_Updated\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LYjTy7I3EOZ8"
      },
      "outputs": [],
      "source": [
        "# !pip install tensorflow==2.15.1  opencv-python matplotlib"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6AOOunLbGIAi",
        "outputId": "0c610f32-fb42-4dd7-ad0e-d6bf22ca9b14"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "GPU: [PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]\n",
            "Num GPUs: 1\n"
          ]
        }
      ],
      "source": [
        "import tensorflow as tf\n",
        "physical_devices = tf.config.list_physical_devices('GPU')\n",
        "\n",
        "print(\"GPU:\", tf.config.list_physical_devices('GPU'))\n",
        "print(\"Num GPUs:\", len(physical_devices))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Zpf4pFDpHAsb"
      },
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "NeW2slVKE8pZ"
      },
      "outputs": [],
      "source": [
        "import cv2\n",
        "import matplotlib.pyplot as plt\n",
        "import os\n",
        "import random\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "J2bGoPy-HOvG"
      },
      "outputs": [],
      "source": [
        "#importing tensorflow functional APIs\n",
        "\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.layers import Layer,Conv2D,Dense,MaxPooling2D,Input,Flatten\n",
        "import tensorflow as tf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HfbKsrrLIRp_"
      },
      "outputs": [],
      "source": [
        "# Model(inputs=[inputimage,verificationimage],outputs=[1,0])\n",
        "\n",
        "# for avoiding memory run out erros for ram overflow\n",
        "\n",
        "gpus=tf.config.experimental.list_physical_devices('GPU')\n",
        "\n",
        "for gpu in gpus:\n",
        "  tf.config.experimental.set_memory_growth(gpu,True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hLCwxTF3I2dh",
        "outputId": "96c42cd0-ab51-44ca-c406-72cd3245414a"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]"
            ]
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "gpus"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zZIxLwE8LwOQ"
      },
      "outputs": [],
      "source": [
        "# creating new directories\n",
        "\n",
        "posit_path1=os.path.join('data','positive1')\n",
        "negative_path=os.path.join('data','negative1')\n",
        "anchor_path1=os.path.join('data','anchor1')\n",
        "anchor_path2=os.path.join('data','anchor2')\n",
        "posit_path2=os.path.join('data','positive2')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RJNo9y3pOWiQ"
      },
      "outputs": [],
      "source": [
        "os.makedirs(posit_path1)\n",
        "os.makedirs(posit_path2)\n",
        "\n",
        "os.makedirs(anchor_path1)\n",
        "os.makedirs(anchor_path2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kABeFPb1Gcv7"
      },
      "outputs": [],
      "source": [
        "os.makedirs(negative_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 356
        },
        "id": "nhCOXtRmqY1f",
        "outputId": "8b277f5c-ac29-43b7-bd5b-c5352d6f8009"
      },
      "outputs": [
        {
          "ename": "MessageError",
          "evalue": "Error: credential propagation was unsuccessful",
          "output_type": "error",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mMessageError\u001b[0m                              Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-8-d5df0069828e>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdrive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdrive\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/google/colab/drive.py\u001b[0m in \u001b[0;36mmount\u001b[0;34m(mountpoint, force_remount, timeout_ms, readonly)\u001b[0m\n\u001b[1;32m     98\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmountpoint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mforce_remount\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout_ms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m120000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreadonly\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     99\u001b[0m   \u001b[0;34m\"\"\"Mount your Google Drive at the specified mountpoint path.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 100\u001b[0;31m   return _mount(\n\u001b[0m\u001b[1;32m    101\u001b[0m       \u001b[0mmountpoint\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    102\u001b[0m       \u001b[0mforce_remount\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mforce_remount\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/google/colab/drive.py\u001b[0m in \u001b[0;36m_mount\u001b[0;34m(mountpoint, force_remount, timeout_ms, ephemeral, readonly)\u001b[0m\n\u001b[1;32m    131\u001b[0m   )\n\u001b[1;32m    132\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mephemeral\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 133\u001b[0;31m     _message.blocking_request(\n\u001b[0m\u001b[1;32m    134\u001b[0m         \u001b[0;34m'request_auth'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    135\u001b[0m         \u001b[0mrequest\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m'authType'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m'dfs_ephemeral'\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/google/colab/_message.py\u001b[0m in \u001b[0;36mblocking_request\u001b[0;34m(request_type, request, timeout_sec, parent)\u001b[0m\n\u001b[1;32m    174\u001b[0m       \u001b[0mrequest_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrequest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparent\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexpect_reply\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    175\u001b[0m   )\n\u001b[0;32m--> 176\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0mread_reply_from_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrequest_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout_sec\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/google/colab/_message.py\u001b[0m in \u001b[0;36mread_reply_from_input\u001b[0;34m(message_id, timeout_sec)\u001b[0m\n\u001b[1;32m    101\u001b[0m     ):\n\u001b[1;32m    102\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0;34m'error'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mreply\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 103\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mMessageError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreply\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'error'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    104\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0mreply\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'data'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    105\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mMessageError\u001b[0m: Error: credential propagation was unsuccessful"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ItSLxXXYqk4N"
      },
      "source": [
        "# New section"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M1bgULJJqk71"
      },
      "source": [
        "# New section"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jrhHz1KTxSqj",
        "outputId": "a47be2ad-99de-459e-d8ba-31be0be4d536"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "gzip: stdin: unexpected end of file\n",
            "tar: Unexpected EOF in archive\n",
            "tar: Unexpected EOF in archive\n",
            "tar: Error is not recoverable: exiting now\n"
          ]
        }
      ],
      "source": [
        "#uncompressing the file\n",
        "\n",
        "!tar -xf lfw.tgz"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FqOf_09DP0_h"
      },
      "outputs": [],
      "source": [
        "for dir in os.listdir('lfw'):\n",
        "  for file in os.listdir(os.path.join('lfw',dir)):\n",
        "    EX_PATH=os.path.join('lfw',dir,file)\n",
        "    new_path=os.path.join(negative_path,file)\n",
        "    os.replace(EX_PATH,new_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Rq_lpmytqykH"
      },
      "outputs": [],
      "source": [
        "# anchor=anchor.apply(tf.data.experimental.sort_filenames())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UyW1PzcuSoSx",
        "outputId": "7b2c0e16-6151-489c-cfcc-6c31ef6fccc1"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "75"
            ]
          },
          "execution_count": 11,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "anchor1=tf.data.Dataset.list_files(anchor_path1 +'/*.jpg').take(75)\n",
        "positive1=tf.data.Dataset.list_files(posit_path1+'/*.jpg').take(75)\n",
        "\n",
        "anchor2=tf.data.Dataset.list_files(anchor_path2 +'/*.jpg').take(75)\n",
        "positive2=tf.data.Dataset.list_files(posit_path2+'/*.jpg').take(75)\n",
        "len(positive2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UU53Zt-XK90r"
      },
      "outputs": [],
      "source": [
        "negative=tf.data.Dataset.list_files(negative_path+'/*.jpg').take(75)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_Mqdsx7XxOe1"
      },
      "outputs": [],
      "source": [
        "# anchor=anchor1.concatenate(anchor2)\n",
        "# positive=positive1.concatenate(positive2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        },
        "id": "ABLS7bVKxSu7",
        "outputId": "15a7566c-c10f-467b-9d26-34ded11014c3"
      },
      "outputs": [
        {
          "ename": "NameError",
          "evalue": "name 'positive' is not defined",
          "output_type": "error",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-13-e2caf7d2775f>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnegative\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpositive\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0manchor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'positive' is not defined"
          ]
        }
      ],
      "source": [
        "# len(negative)\n",
        "# len(positive)\n",
        "# len(anchor)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BCo3Nsv_jxKX"
      },
      "outputs": [],
      "source": [
        "pos_train1=tf.data.Dataset.zip((anchor1,positive1,tf.data.Dataset.from_tensor_slices(np.ones(len(anchor1)))))\n",
        "neg_train1=tf.data.Dataset.zip((anchor1,negative,tf.data.Dataset.from_tensor_slices(np.zeros(len(anchor1)))))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "k0OK8YTWXyBV"
      },
      "outputs": [],
      "source": [
        "# anchor1.concatenate(anchor2)\n",
        "\n",
        "pos_train2=tf.data.Dataset.zip((anchor2,positive2,tf.data.Dataset.from_tensor_slices(np.ones(len(anchor2)))))\n",
        "neg_train2=tf.data.Dataset.zip((anchor2,negative,tf.data.Dataset.from_tensor_slices(np.zeros(len(anchor2)))))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JaD7lPWcmSnL"
      },
      "outputs": [],
      "source": [
        "# count=0\n",
        "# for anchor_elem, positive_elem, ones_elem in positives:\n",
        "#     print(\"Anchor:\", anchor_elem.numpy())\n",
        "#     print(\"Positive:\", positive_elem.numpy())\n",
        "#     print(\"Ones:\", ones_elem.numpy())\n",
        "#     count+=1\n",
        "# count"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5K7na9zL8yjA"
      },
      "outputs": [],
      "source": [
        "samples="
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_5bND3UVmKLK",
        "outputId": "9a5b9dd2-4de3-4eed-804e-59ffacbd445d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<_ZipDataset element_spec=(TensorSpec(shape=(), dtype=tf.string, name=None), TensorSpec(shape=(), dtype=tf.string, name=None), TensorSpec(shape=(), dtype=tf.float64, name=None))>"
            ]
          },
          "execution_count": 21,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# positives"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s4oU0AKu4-e7",
        "outputId": "176f074b-9e41-4a2d-e888-d94e07180379"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(b'data/anchor1/74be9466-27bc-11ef-b09c-f0a6541fed1f.jpg',\n",
              " b'data/positive1/aee79b42-27bb-11ef-b3d3-f0a6541fed1f.jpg',\n",
              " 1.0)"
            ]
          },
          "execution_count": 261,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# positives.as_numpy_iterator().next()\n",
        "# positives.as_numpy_iterator().next()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Z8GE_urQ4zQc"
      },
      "outputs": [],
      "source": [
        "def preprocess(file_path):\n",
        "  byte_img=tf.io.read_file(file_path)\n",
        "  img=tf.io.decode_jpeg(byte_img)\n",
        "  img=tf.image.resize(img,(100,100))\n",
        "  img=img/255\n",
        "  return img\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lnOfXLvg-Pa_"
      },
      "outputs": [],
      "source": [
        "def preprocess_twin(input_img,validation_img,label):\n",
        "  return(preprocess(input_img),preprocess(validation_img),label)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "g2WGLCNHZEvw"
      },
      "outputs": [],
      "source": [
        "data1=pos_train1.concatenate(neg_train1)\n",
        "# print(len(data))\n",
        "data2=pos_train2.concatenate(neg_train2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        },
        "id": "OnN26O_X_BcA",
        "outputId": "6bb686d2-b07c-4ae9-9041-27d0ad9499fa"
      },
      "outputs": [
        {
          "ename": "NameError",
          "evalue": "name 'data' is not defined",
          "output_type": "error",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-20-2259cdcceee1>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mexample\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mas_numpy_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0msample\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mexample\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# *example\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'data' is not defined"
          ]
        }
      ],
      "source": [
        "# example=data.as_numpy_iterator()\n",
        "# sample=example.next()\n",
        "# *example\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 245
        },
        "id": "m7N9Dg7T_Qgi",
        "outputId": "0cdf059d-b623-4813-9fac-505707b81e8a"
      },
      "outputs": [
        {
          "ename": "NameError",
          "evalue": "name 'example' is not defined",
          "output_type": "error",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-63-133017616566>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msample\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mexample\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpreprocess_twin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'example' is not defined"
          ]
        }
      ],
      "source": [
        "sample=example.next()\n",
        "res=preprocess_twin(*sample)\n",
        "plt.imshow(res[0])\n",
        "plt.show()\n",
        "plt.imshow(res[1])\n",
        "plt.show()\n",
        "res[2]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "22QfEQbS_j6E",
        "outputId": "4d2e0c50-9f30-4589-d8e4-f6ffdff82bcd"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<tf.Tensor: shape=(100, 100, 3), dtype=float32, numpy=\n",
              "array([[[0.65392154, 0.6647059 , 0.6578431 ],\n",
              "        [0.64705884, 0.67058825, 0.6627451 ],\n",
              "        [0.66862744, 0.67058825, 0.66764706],\n",
              "        ...,\n",
              "        [0.5872549 , 0.6068627 , 0.59117645],\n",
              "        [0.59117645, 0.6107843 , 0.5872549 ],\n",
              "        [0.5872549 , 0.6068627 , 0.5833333 ]],\n",
              "\n",
              "       [[0.65294117, 0.6637255 , 0.65686274],\n",
              "        [0.6480392 , 0.6637255 , 0.6598039 ],\n",
              "        [0.6647059 , 0.6647059 , 0.6627451 ],\n",
              "        ...,\n",
              "        [0.5852941 , 0.60490197, 0.5892157 ],\n",
              "        [0.5921569 , 0.6       , 0.5882353 ],\n",
              "        [0.59607846, 0.6039216 , 0.5921569 ]],\n",
              "\n",
              "       [[0.65294117, 0.6637255 , 0.65686274],\n",
              "        [0.64509803, 0.6647059 , 0.6490196 ],\n",
              "        [0.672549  , 0.672549  , 0.672549  ],\n",
              "        ...,\n",
              "        [0.60490197, 0.6127451 , 0.6009804 ],\n",
              "        [0.5892157 , 0.59705883, 0.5852941 ],\n",
              "        [0.59705883, 0.60490197, 0.59313726]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[0.5480392 , 0.5686275 , 0.6401961 ],\n",
              "        [0.6460784 , 0.6607843 , 0.7107843 ],\n",
              "        [0.57058823, 0.58235294, 0.6509804 ],\n",
              "        ...,\n",
              "        [0.63529414, 0.6431373 , 0.62352943],\n",
              "        [0.64117646, 0.64509803, 0.6254902 ],\n",
              "        [0.627451  , 0.6313726 , 0.6117647 ]],\n",
              "\n",
              "       [[0.595098  , 0.6186274 , 0.67941177],\n",
              "        [0.6215686 , 0.64509803, 0.69215685],\n",
              "        [0.58137256, 0.6009804 , 0.6754902 ],\n",
              "        ...,\n",
              "        [0.6333333 , 0.64117646, 0.6215686 ],\n",
              "        [0.627451  , 0.63529414, 0.6156863 ],\n",
              "        [0.6245098 , 0.63235295, 0.6127451 ]],\n",
              "\n",
              "       [[0.57843137, 0.6019608 , 0.6627451 ],\n",
              "        [0.62058824, 0.64411765, 0.6911765 ],\n",
              "        [0.5529412 , 0.57254905, 0.64705884],\n",
              "        ...,\n",
              "        [0.62058824, 0.6284314 , 0.60882354],\n",
              "        [0.6166667 , 0.6245098 , 0.60490197],\n",
              "        [0.6009804 , 0.62058824, 0.59705883]]], dtype=float32)>"
            ]
          },
          "execution_count": 23,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "res[1]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1hHPXSNjIEGZ"
      },
      "outputs": [],
      "source": [
        "data=data1.concatenate(data2)\n",
        "data=data.map(preprocess_twin)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0WFLK6mD-pub",
        "outputId": "14454ea9-b92a-4ec6-e9ae-665a62ff42a4"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<_MapDataset element_spec=(TensorSpec(shape=(100, 100, None), dtype=tf.float32, name=None), TensorSpec(shape=(100, 100, None), dtype=tf.float32, name=None), TensorSpec(shape=(), dtype=tf.float64, name=None))>"
            ]
          },
          "execution_count": 19,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-aZqWREBCAwz"
      },
      "outputs": [],
      "source": [
        "data1=data1.map(preprocess_twin)\n",
        "data2=data2.map(preprocess_twin)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 866
        },
        "id": "54oUOVmKjWtr",
        "outputId": "0ad0b55a-2922-4b6d-8bc6-d74d8f8fc833"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "1.0"
            ]
          },
          "execution_count": 20,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "check=data.as_numpy_iterator()\n",
        "plt.imshow(check.next()[0])\n",
        "plt.show()\n",
        "plt.imshow(check.next()[1])\n",
        "plt.show()\n",
        "check.next()[2]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nEjpQopF4QP2",
        "outputId": "58fd2649-7863-4391-9314-04c2ba3fcedf"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<_MapDataset element_spec=(TensorSpec(shape=(100, 100, None), dtype=tf.float32, name=None), TensorSpec(shape=(100, 100, None), dtype=tf.float32, name=None), TensorSpec(shape=(), dtype=tf.float64, name=None))>"
            ]
          },
          "execution_count": 18,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0K6w8vjQ4RSO"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-L9mxzF5CqfW"
      },
      "outputs": [],
      "source": [
        "data=data.cache()\n",
        "data=data.shuffle(buffer_size=1024)\n",
        "\n",
        "\n",
        "# data2=data2.cache()\n",
        "# data2=data2.shuffle(buffer_size=1024)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZjxLcJX23pLO",
        "outputId": "3a2430d1-b6e9-4174-f302-a79808d926da"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<_ShuffleDataset element_spec=(TensorSpec(shape=(100, 100, None), dtype=tf.float32, name=None), TensorSpec(shape=(100, 100, None), dtype=tf.float32, name=None), TensorSpec(shape=(), dtype=tf.float64, name=None))>"
            ]
          },
          "execution_count": 20,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5Xp-sG3O0oPi"
      },
      "outputs": [],
      "source": [
        "# data=data1.concatenate(data2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Tf23kSSw3nH2",
        "outputId": "1cc43b67-1fda-47c8-c66b-01b48743a360"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<_MapDataset element_spec=(TensorSpec(shape=(100, 100, None), dtype=tf.float32, name=None), TensorSpec(shape=(100, 100, None), dtype=tf.float32, name=None), TensorSpec(shape=(), dtype=tf.float64, name=None))>"
            ]
          },
          "execution_count": 103,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "voF--yuSAk0X",
        "outputId": "da9d1c10-d782-4c2a-af0b-36b975f49d29"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<_MapDataset element_spec=(TensorSpec(shape=(100, 100, None), dtype=tf.float32, name=None), TensorSpec(shape=(100, 100, None), dtype=tf.float32, name=None), TensorSpec(shape=(), dtype=tf.float64, name=None))>"
            ]
          },
          "execution_count": 96,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "28KJ20KYLOKQ",
        "outputId": "724275c2-a50c-4188-c8cd-a15682295e1c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "202\n"
          ]
        }
      ],
      "source": [
        "train_data=data.take(round(len(data)*0.7))\n",
        "print(len(train_data))\n",
        "train_data=train_data.batch(16)\n",
        "# print(len(train_data[0]))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vLVvUMkY4iA4",
        "outputId": "97399be5-c922-46cb-b89c-9ee50379690d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<_BatchDataset element_spec=(TensorSpec(shape=(None, 100, 100, None), dtype=tf.float32, name=None), TensorSpec(shape=(None, 100, 100, None), dtype=tf.float32, name=None), TensorSpec(shape=(None,), dtype=tf.float64, name=None))>"
            ]
          },
          "execution_count": 23,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "train_data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rHImnm4Jz98a",
        "outputId": "891a2fc4-6d52-4093-f2a5-c99540dd499f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "105\n"
          ]
        }
      ],
      "source": [
        "# train_data2=data2.take(round(len(data2)*0.7))\n",
        "# print(len(train_data2))\n",
        "# train_data2=train_data2.batch(16)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Jgt4k6XGLbg9",
        "outputId": "10e14624-897d-49a1-ccde-952c5e60d33f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "288\n"
          ]
        }
      ],
      "source": [
        "test_data=data.skip(round(len(data)*0.7))\n",
        "test_data=data.take(round(len(data)*0.3))\n",
        "#skip(round(len(data)*0.7))\n",
        "#test_data=test_data.take(60)\n",
        "test_data=test_data.batch(16)\n",
        "print(len(data))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ndIs-KaD4Mtv",
        "outputId": "0d45aef0-568b-4d3e-c120-11c2cb00c4f3"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<_BatchDataset element_spec=(TensorSpec(shape=(None, 100, 100, None), dtype=tf.float32, name=None), TensorSpec(shape=(None, 100, 100, None), dtype=tf.float32, name=None), TensorSpec(shape=(None,), dtype=tf.float64, name=None))>"
            ]
          },
          "execution_count": 30,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "train_data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Fh5xQbmSUyXj"
      },
      "outputs": [],
      "source": [
        "inp=Input(shape=(100,100,3),name=\"input\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "AIAfx1gaU5Yp"
      },
      "outputs": [],
      "source": [
        "c1=Conv2D(64,(10,10),activation='relu')(inp)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nHNyO7FUL7l9"
      },
      "outputs": [],
      "source": [
        "def make_embedding():\n",
        "  inp=Input(shape=(100,100,3),name='input_image')\n",
        "\n",
        "  # first block\n",
        "  c1=Conv2D(64,(10,10),activation='relu')(inp)\n",
        "  m1=MaxPooling2D(64,(2,2),padding='same')(c1)\n",
        "\n",
        "  # seond block\n",
        "  c2=Conv2D(128,(7,7),activation='relu')(m1)\n",
        "  m2=MaxPooling2D(64,(2,2),padding='same')(c2)\n",
        "\n",
        "  #third block\n",
        "  c3=Conv2D(128,(4,4),activation='relu')(m2)\n",
        "  m3=MaxPooling2D(64,(2,2),padding='same')(c3)\n",
        "\n",
        "\n",
        "\n",
        "  #convolution and dense layer towards the end\n",
        "  c4=Conv2D(256,(4,4),activation='relu')(m3)\n",
        "  f1=Flatten()(c4)\n",
        "  d1=Dense(4096,activation='sigmoid')(f1)\n",
        "  return Model(inputs=[inp],outputs=[d1],name=\"embedding\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SOg3wG84DMTm",
        "outputId": "e8261b0a-cce1-4c42-c097-95d6b121bfda"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Model: \"embedding\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " input_image (InputLayer)    [(None, 100, 100, 3)]     0         \n",
            "                                                                 \n",
            " conv2d (Conv2D)             (None, 91, 91, 64)        19264     \n",
            "                                                                 \n",
            " max_pooling2d (MaxPooling2  (None, 46, 46, 64)        0         \n",
            " D)                                                              \n",
            "                                                                 \n",
            " conv2d_1 (Conv2D)           (None, 40, 40, 128)       401536    \n",
            "                                                                 \n",
            " max_pooling2d_1 (MaxPoolin  (None, 20, 20, 128)       0         \n",
            " g2D)                                                            \n",
            "                                                                 \n",
            " conv2d_2 (Conv2D)           (None, 17, 17, 128)       262272    \n",
            "                                                                 \n",
            " max_pooling2d_2 (MaxPoolin  (None, 9, 9, 128)         0         \n",
            " g2D)                                                            \n",
            "                                                                 \n",
            " conv2d_3 (Conv2D)           (None, 6, 6, 256)         524544    \n",
            "                                                                 \n",
            " flatten (Flatten)           (None, 9216)              0         \n",
            "                                                                 \n",
            " dense (Dense)               (None, 4096)              37752832  \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 38960448 (148.62 MB)\n",
            "Trainable params: 38960448 (148.62 MB)\n",
            "Non-trainable params: 0 (0.00 Byte)\n",
            "_________________________________________________________________\n"
          ]
        }
      ],
      "source": [
        "embedding=make_embedding()\n",
        "embedding.summary()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "W9THhqitE3NH"
      },
      "outputs": [],
      "source": [
        "class L1Dist(Layer):\n",
        "\n",
        "  #init method-inheritance\n",
        "  def __init__(self,**kwargs):\n",
        "    super().__init__()\n",
        "\n",
        "  def call(self,input_embedding,validation_embedding):\n",
        "    return tf.math.abs(input_embedding-validation_embedding)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bCRSLuD_O4JU"
      },
      "outputs": [],
      "source": [
        "l1=L1Dist()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "N-bZelCgPjzs"
      },
      "outputs": [],
      "source": [
        "def make_siamese_model():\n",
        "\n",
        "  #anchor image in the network\n",
        "  input_img=Input(name=\"input image\",shape=(100,100,3))\n",
        "\n",
        "\n",
        "  #validation image in the network\n",
        "  valid_img=Input(name=\"validation image\",shape=(100,100,3))\n",
        "\n",
        "  siamese_layer=L1Dist()\n",
        "  siamese_layer._name='distance'\n",
        "  distances=siamese_layer(embedding(input_img),embedding(valid_img))\n",
        "\n",
        "  classifier=Dense(1,activation='sigmoid')(distances)\n",
        "\n",
        "  return Model(inputs=[input_img,valid_img],outputs=classifier,name=\"siamese_model\")\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ptHe_oEubWwX"
      },
      "outputs": [],
      "source": [
        "siamese_model=make_siamese_model()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "E_QyaA1HPkLx"
      },
      "outputs": [],
      "source": [
        "# loss function\n",
        "binary_cross=tf.losses.BinaryCrossentropy()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "leT5HFB3ZMsq"
      },
      "outputs": [],
      "source": [
        "opt=tf.keras.optimizers.Adam(1e-4)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9pjFM6QyZbwy"
      },
      "outputs": [],
      "source": [
        "# Establishing ckeckpoints\n",
        "checkpoint_dir='./training_checkpoint'\n",
        "checkpoint_prefix=os.path.join(checkpoint_dir,'ckpt')\n",
        "checkpoint=tf.train.Checkpoint(opt=opt,siamese_model=siamese_model)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J0ncnMt112IR"
      },
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9atgSZe6i3in"
      },
      "outputs": [],
      "source": [
        "test_batch=test_data.as_numpy_iterator()\n",
        "batch1=test_batch.next()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yJmnV6X0jOl3"
      },
      "outputs": [],
      "source": [
        "x=batch1[:2]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TfJOZ7dVkhTJ",
        "outputId": "546cf00f-e192-4258-df06-456de76f3495"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(2, 16, 100, 100, 3)"
            ]
          },
          "execution_count": 43,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.array(x).shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8LYEkeBBkZlx",
        "outputId": "9cf82220-1851-45ae-83d4-002e850e70e3"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([1., 1., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0., 1., 1., 1., 1.])"
            ]
          },
          "execution_count": 40,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "y=batch1[2]\n",
        "y"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Jve6uBfJhhtr"
      },
      "outputs": [],
      "source": [
        "# training starts\n",
        "@tf.function\n",
        "def train_step(batch):\n",
        "\n",
        "  with tf.GradientTape() as tape:\n",
        "    x=batch[:2]\n",
        "    y=batch[2]\n",
        "# compiles a function into ca cllable tensorflow graph\n",
        "    y_hat=siamese_model(x,training=True)\n",
        "    # calculate loss\n",
        "    loss=binary_cross(y,y_hat)\n",
        "  print(loss)\n",
        "\n",
        "  # calculate gradients\n",
        "  grad=tape.gradient(loss,siamese_model.trainable_variables)\n",
        "\n",
        "  # update the weights\n",
        "  opt.apply_gradients(zip(grad,siamese_model.trainable_variables))\n",
        "\n",
        "  return loss\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "p9pIc1SL0QCp"
      },
      "outputs": [],
      "source": [
        "# train_data=train_data1.concatenate(train_data2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ueA-tzwXhwPZ"
      },
      "outputs": [],
      "source": [
        "def train(data,EPOCHS):\n",
        "  # loop through every batch\n",
        "  for epoch in range(1,EPOCHS+1):\n",
        "\n",
        "    # progbar=\n",
        "    # loop through each batch\n",
        "    for idx,batch in enumerate(train_data):\n",
        "      # run train step here\n",
        "      train_step(batch)\n",
        "\n",
        "    if epoch%10==0:\n",
        "      checkpoint.save(file_prefix=checkpoint_prefix)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "OdHLXiR5hwLY",
        "outputId": "ab7293a7-3721-488e-d8c6-3ff4f24b279e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Tensor(\"binary_crossentropy/weighted_loss/value:0\", shape=(), dtype=float32)\n",
            "Tensor(\"binary_crossentropy/weighted_loss/value:0\", shape=(), dtype=float32)\n",
            "Tensor(\"binary_crossentropy/weighted_loss/value:0\", shape=(), dtype=float32)\n"
          ]
        }
      ],
      "source": [
        "\n",
        "\n",
        "EPOCHS=50\n",
        "train(train_data,EPOCHS)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KBT87r9E6qw-"
      },
      "outputs": [],
      "source": [
        "test_input,test_val,y_true=test_data.as_numpy_iterator().next()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Y4TCbW989_yf"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ECPrvlghB16v",
        "outputId": "924f0604-d682-4b05-c6d6-529306021eac"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "5"
            ]
          },
          "execution_count": 48,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "len(test_input)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "B8P7VyFYGGXY"
      },
      "outputs": [],
      "source": [
        "new_test=os.path.join('data','new_test')\n",
        "new_test_var=os.path.join('data','new_test_verification')\n",
        "os.makedirs(new_test_var)\n",
        "os.makedirs(new_test)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bCvLSZulHKkd"
      },
      "outputs": [],
      "source": [
        "new_test1=tf.data.Dataset.list_files(new_test+'/*jpg')\n",
        "#new_test1=new_test1.map(preprocess)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qvfmoK2VJNuG"
      },
      "outputs": [],
      "source": [
        "new_test2=tf.data.Dataset.list_files(new_test_var+'/*jpg')\n",
        "#new_test2=new_test2.map(preprocess)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "acr_SAHlJcDW"
      },
      "outputs": [],
      "source": [
        "iterate=new_test.as_numpy_iterator()\n",
        "sample1=iterate.next()\n",
        "len(sample1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ODTN2CkJ8_Do"
      },
      "outputs": [],
      "source": [
        "tester=tf.data.Dataset.zip((new_test1,new_test2,tf.data.Dataset.from_tensor_slices(np.zeros(40))))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kiEYDRCV9IrQ",
        "outputId": "bdf2238e-58bc-45a7-dc47-5164d1c5d959"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "34"
            ]
          },
          "execution_count": 79,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "tester=tester.map(preprocess_twin)\n",
        "len(tester)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qFVCsoyy9eok",
        "outputId": "f1c7bc44-53a6-47bf-8ab9-10508e635db9"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "3"
            ]
          },
          "execution_count": 80,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "final_tester=tester.batch(16)\n",
        "len(final_tester)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rbXVtwLd-Bk9"
      },
      "outputs": [],
      "source": [
        "test_input,test_val,y_true=final_tester.as_numpy_iterator().next()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Pb7th9T8LilA",
        "outputId": "24b8649f-9d66-4048-e797-789b3d5c54e9"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "16"
            ]
          },
          "execution_count": 86,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "len(test_input)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DmiXwfUB7akO",
        "outputId": "00d6ebcd-c0fc-4ee9-953d-05a49a080e90"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "1/1 [==============================] - 0s 21ms/step\n"
          ]
        }
      ],
      "source": [
        "y_hat=siamese_model.predict([test_input,test_val])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 849
        },
        "id": "rfUPuF4U9yVr",
        "outputId": "91d8ead3-0a70-438a-da51-fb19d070e1be"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "y_hat[0]\n",
        "plt.imshow(test_input[15])\n",
        "plt.show()\n",
        "plt.imshow(test_val[15])\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iGo-twOq98i6",
        "outputId": "72ef55db-dfb0-48f1-9471-53d7b3347688"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0]"
            ]
          },
          "execution_count": 89,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "[1 if prediction>0.5 else 0 for prediction in y_hat]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sF_znKKE-Y7E",
        "outputId": "531ebe57-8563-439d-aa84-efc131ebe72b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"
            ]
          },
          "execution_count": 111,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "y_true"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7VoFSKMR-ghz"
      },
      "outputs": [],
      "source": [
        "# calculating metrics\n",
        "from tensorflow.keras.metrics import Recall,Precision\n",
        "\n",
        "m=Recall()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4ghHeEDJkD1i"
      },
      "outputs": [],
      "source": [
        "m.update_state(y_true,y_hat)\n",
        "m.result().numpy()"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "gLvnvyUAKz_q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# saving the model\n",
        "siamese_model.save('siamese_model.h5')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7Bvb047HKbtN",
        "outputId": "b6724f90-8b94-417f-dfa5-d823d6c2a777"
      },
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:3103: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n",
            "  saving_api.save_model(\n",
            "WARNING:tensorflow:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#reloading the model\n",
        "\n",
        "\n",
        "model=tf.keras.models.load_model('siamese_model.h5',custom_objects={'L1Dist':L1Dist,'BinaryCrossEntropy':tf.losses.BinaryCrossentropy})"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pNBzwrj3L_38",
        "outputId": "12ba544d-f335-442f-fe1f-16ab31a46a02"
      },
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:No training configuration found in the save file, so the model was *not* compiled. Compile it manually.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gia3HS1dOyx6",
        "outputId": "c9ef4bc6-8143-4ef6-d293-e90efa4f208f"
      },
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"siamese_model\"\n",
            "__________________________________________________________________________________________________\n",
            " Layer (type)                Output Shape                 Param #   Connected to                  \n",
            "==================================================================================================\n",
            " input image (InputLayer)    [(None, 100, 100, 3)]        0         []                            \n",
            "                                                                                                  \n",
            " validation image (InputLay  [(None, 100, 100, 3)]        0         []                            \n",
            " er)                                                                                              \n",
            "                                                                                                  \n",
            " embedding (Functional)      (None, 4096)                 3896044   ['input image[0][0]',         \n",
            "                                                          8          'validation image[0][0]']    \n",
            "                                                                                                  \n",
            " l1_dist_3 (L1Dist)          (None, 4096)                 0         ['embedding[0][0]',           \n",
            "                                                                     'embedding[1][0]']           \n",
            "                                                                                                  \n",
            " dense_1 (Dense)             (None, 1)                    4097      ['l1_dist_3[0][0]']           \n",
            "                                                                                                  \n",
            "==================================================================================================\n",
            "Total params: 38964545 (148.64 MB)\n",
            "Trainable params: 38964545 (148.64 MB)\n",
            "Non-trainable params: 0 (0.00 Byte)\n",
            "__________________________________________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Real Time Test\n",
        "\n",
        "def verify(frame,model,detection_threshold,verification_threshold):\n",
        "\n",
        "  results=[]\n",
        "\n",
        "  for image in os.listdir(os.path.join('application_data','verification_images')):\n",
        "    input_img=preprocess(os.path.join('application_data','input_image','input_image.jpg'))\n",
        "\n",
        "    validation_img=preprocess(os.path.join('application_data','verification_images',image))\n",
        "\n",
        "    result=model.predict(list(np.expand_dims([input_img,validation_img],axis=1)))\n",
        "    results.append(result)\n",
        "\n",
        "\n",
        "  correct_detects=np.sum(np.array(results)>detection_threshold)\n",
        "  verified_samples=correct_detects/len(os.listdir(os.path.join('application_data','verification_images')))\n",
        "\n",
        "  verified=verified_samples>verification_threshold\n",
        "\n",
        "  return verified\n",
        "\n"
      ],
      "metadata": {
        "id": "V3XbynRaPFeC"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "gpuType": "T4",
      "provenance": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}