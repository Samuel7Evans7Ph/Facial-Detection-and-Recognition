{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Samuel7Evans7Ph/Facial-Detection-and-Recognition/blob/master/Face_Recognition\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LYjTy7I3EOZ8"
      },
      "outputs": [],
      "source": [
        "# !pip install tensorflow==2.15.1  opencv-python matplotlib"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6AOOunLbGIAi"
      },
      "outputs": [],
      "source": [
        "import tensorflow as tf\n",
        "physical_devices = tf.config.list_physical_devices('GPU')\n",
        "\n",
        "print(\"GPU:\", tf.config.list_physical_devices('GPU'))\n",
        "print(\"Num GPUs:\", len(physical_devices))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Zpf4pFDpHAsb"
      },
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "NeW2slVKE8pZ"
      },
      "outputs": [],
      "source": [
        "import cv2\n",
        "import matplotlib.pyplot as plt\n",
        "import os\n",
        "import random\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "J2bGoPy-HOvG"
      },
      "outputs": [],
      "source": [
        "#importing tensorflow functional APIs\n",
        "\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.layers import Layer,Conv2D,Dense,MaxPooling2D,Input,Flatten\n",
        "import tensorflow as tf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HfbKsrrLIRp_"
      },
      "outputs": [],
      "source": [
        "# Model(inputs=[inputimage,verificationimage],outputs=[1,0])\n",
        "\n",
        "# for avoiding memory run out erros for ram overflow\n",
        "\n",
        "gpus=tf.config.experimental.list_physical_devices('GPU')\n",
        "\n",
        "for gpu in gpus:\n",
        "  tf.config.experimental.set_memory_growth(gpu,True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hLCwxTF3I2dh",
        "outputId": "5d4ccf7d-5142-43d3-f456-719bff1a2779"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[]"
            ]
          },
          "execution_count": 9,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "gpus"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zZIxLwE8LwOQ"
      },
      "outputs": [],
      "source": [
        "# creating new directories\n",
        "\n",
        "posit_path=os.path.join('data','positive')\n",
        "negat_path=os.path.join('data','negative')\n",
        "anchor_path=os.path.join('data','anchor')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "RJNo9y3pOWiQ",
        "outputId": "563e4516-0a90-4b4f-8c04-955d44d3df19"
      },
      "outputs": [
        {
          "ename": "FileExistsError",
          "evalue": "[Errno 17] File exists: 'data/positive'",
          "output_type": "error",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileExistsError\u001b[0m                           Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-11-68b3ec952a4e>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmakedirs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mposit_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmakedirs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnegat_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmakedirs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0manchor_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.10/os.py\u001b[0m in \u001b[0;36mmakedirs\u001b[0;34m(name, mode, exist_ok)\u001b[0m\n\u001b[1;32m    223\u001b[0m             \u001b[0;32mreturn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    224\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 225\u001b[0;31m         \u001b[0mmkdir\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    226\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mOSError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    227\u001b[0m         \u001b[0;31m# Cannot rely on checking for EEXIST, since the operating system\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileExistsError\u001b[0m: [Errno 17] File exists: 'data/positive'"
          ]
        }
      ],
      "source": [
        "os.makedirs(posit_path)\n",
        "os.makedirs(negat_path)\n",
        "os.makedirs(anchor_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nhCOXtRmqY1f"
      },
      "outputs": [],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ItSLxXXYqk4N"
      },
      "source": [
        "# New section"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M1bgULJJqk71"
      },
      "source": [
        "# New section"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jrhHz1KTxSqj",
        "outputId": "d1c06410-68de-4ab7-9b9d-d2ea084c8fa2"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "gzip: stdin: unexpected end of file\n",
            "tar: Unexpected EOF in archive\n",
            "tar: Unexpected EOF in archive\n",
            "tar: Error is not recoverable: exiting now\n"
          ]
        }
      ],
      "source": [
        "#uncompressing the file\n",
        "\n",
        "!tar -xf lfw.tgz"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FqOf_09DP0_h"
      },
      "outputs": [],
      "source": [
        "for dir in os.listdir('lfw'):\n",
        "  for file in os.listdir(os.path.join('lfw',dir)):\n",
        "    EX_PATH=os.path.join('lfw',dir,file)\n",
        "    new_path=os.path.join(negat_path,file)\n",
        "    os.replace(EX_PATH,new_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UyW1PzcuSoSx"
      },
      "outputs": [],
      "source": [
        "anchor=tf.data.Dataset.list_files(anchor_path +'/*.jpg').take(250)\n",
        "positive=tf.data.Dataset.list_files(posit_path+'/*.jpg').take(250)\n",
        "negative=tf.data.Dataset.list_files(negat_path+'/*.jpg').take(250)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "k0OK8YTWXyBV"
      },
      "outputs": [],
      "source": [
        "positives=tf.data.Dataset.zip((anchor,positive,tf.data.Dataset.from_tensor_slices(np.ones(len(anchor)))))\n",
        "negatives=tf.data.Dataset.zip((anchor,negative,tf.data.Dataset.from_tensor_slices(np.zeros(len(anchor)))))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s4oU0AKu4-e7",
        "outputId": "df07c884-147b-4f05-e5cf-d8ff90402923"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "250"
            ]
          },
          "execution_count": 16,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "len(positives)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Z8GE_urQ4zQc"
      },
      "outputs": [],
      "source": [
        "def preprocess(file_path):\n",
        "  byte_img=tf.io.read_file(file_path)\n",
        "  img=tf.io.decode_jpeg(byte_img)\n",
        "  img=tf.image.resize(img,(100,100))\n",
        "  img=img/255\n",
        "  return img\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lnOfXLvg-Pa_"
      },
      "outputs": [],
      "source": [
        "def preprocess_twin(input_img,validation_img,label):\n",
        "  return(preprocess(input_img),preprocess(validation_img),label)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g2WGLCNHZEvw",
        "outputId": "558f9118-42e7-4edd-97f1-cdc948c8b8cb"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "500\n"
          ]
        }
      ],
      "source": [
        "data=positives.concatenate(negatives)\n",
        "print(len(data))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "OnN26O_X_BcA"
      },
      "outputs": [],
      "source": [
        "example=data.as_numpy_iterator()\n",
        "sample=example.next()\n",
        "# *example"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "m7N9Dg7T_Qgi"
      },
      "outputs": [],
      "source": [
        "res=preprocess_twin(*sample)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "22QfEQbS_j6E",
        "outputId": "a3579002-93c4-4eb5-f44d-fe05c0a0c5b3"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<tf.Tensor: shape=(100, 100, 3), dtype=float32, numpy=\n",
              "array([[[0.64705884, 0.6490196 , 0.6480392 ],\n",
              "        [0.64215684, 0.6578431 , 0.65392154],\n",
              "        [0.6617647 , 0.6598039 , 0.6490196 ],\n",
              "        ...,\n",
              "        [0.5921569 , 0.6       , 0.5882353 ],\n",
              "        [0.5921569 , 0.6       , 0.5882353 ],\n",
              "        [0.58137256, 0.5892157 , 0.577451  ]],\n",
              "\n",
              "       [[0.6509804 , 0.65294117, 0.65      ],\n",
              "        [0.65392154, 0.6617647 , 0.6578431 ],\n",
              "        [0.66568625, 0.66568625, 0.6578431 ],\n",
              "        ...,\n",
              "        [0.577451  , 0.5852941 , 0.5735294 ],\n",
              "        [0.577451  , 0.5852941 , 0.5735294 ],\n",
              "        [0.577451  , 0.5852941 , 0.5735294 ]],\n",
              "\n",
              "       [[0.65882355, 0.6607843 , 0.6519608 ],\n",
              "        [0.6578431 , 0.66568625, 0.65392154],\n",
              "        [0.672549  , 0.672549  , 0.672549  ],\n",
              "        ...,\n",
              "        [0.5852941 , 0.59313726, 0.58137256],\n",
              "        [0.5872549 , 0.595098  , 0.5833333 ],\n",
              "        [0.5735294 , 0.58137256, 0.56960785]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[0.46764705, 0.4715686 , 0.5480392 ],\n",
              "        [0.39509803, 0.3990196 , 0.46960783],\n",
              "        [0.3990196 , 0.4107843 , 0.47745097],\n",
              "        ...,\n",
              "        [0.6245098 , 0.6284314 , 0.60490197],\n",
              "        [0.6186274 , 0.622549  , 0.5990196 ],\n",
              "        [0.6156863 , 0.61960787, 0.59607846]],\n",
              "\n",
              "       [[0.42647058, 0.43039215, 0.5009804 ],\n",
              "        [0.38921568, 0.39313725, 0.46372548],\n",
              "        [0.36862746, 0.37254903, 0.4509804 ],\n",
              "        ...,\n",
              "        [0.61764705, 0.6215686 , 0.5980392 ],\n",
              "        [0.6156863 , 0.61960787, 0.59607846],\n",
              "        [0.6019608 , 0.6117647 , 0.5852941 ]],\n",
              "\n",
              "       [[0.4019608 , 0.40980393, 0.46862745],\n",
              "        [0.36568627, 0.36960784, 0.44019607],\n",
              "        [0.36568627, 0.36960784, 0.4480392 ],\n",
              "        ...,\n",
              "        [0.60882354, 0.6166667 , 0.59705883],\n",
              "        [0.60294116, 0.6107843 , 0.59117645],\n",
              "        [0.59705883, 0.60490197, 0.5852941 ]]], dtype=float32)>"
            ]
          },
          "execution_count": 22,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "res[1]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1hHPXSNjIEGZ"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-aZqWREBCAwz"
      },
      "outputs": [],
      "source": [
        "data=data.map(preprocess_twin)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-L9mxzF5CqfW"
      },
      "outputs": [],
      "source": [
        "data=data.cache()\n",
        "data=data.shuffle(buffer_size=1024)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "28KJ20KYLOKQ",
        "outputId": "71a7781b-bd81-445d-9e03-805255105607"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "350\n"
          ]
        }
      ],
      "source": [
        "train_data=data.take(round(len(data)*0.7))\n",
        "print(len(train_data))\n",
        "train_data=train_data.batch(16)\n",
        "# print(len(train_data[0]))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Jgt4k6XGLbg9"
      },
      "outputs": [],
      "source": [
        "test_data=data.skip(round(len(data)*0.7))\n",
        "test_data=test_data.take(round(len(data)*0.3))\n",
        "test_data=test_data.batch(16)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Fh5xQbmSUyXj"
      },
      "outputs": [],
      "source": [
        "inp=Input(shape=(100,100,3),name=\"input\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "AIAfx1gaU5Yp"
      },
      "outputs": [],
      "source": [
        "c1=Conv2D(64,(10,10),activation='relu')(inp)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nHNyO7FUL7l9"
      },
      "outputs": [],
      "source": [
        "def make_embedding():\n",
        "  inp=Input(shape=(100,100,3),name='input_image')\n",
        "\n",
        "  # first block\n",
        "  c1=Conv2D(64,(10,10),activation='relu')(inp)\n",
        "  m1=MaxPooling2D(64,(2,2),padding='same')(c1)\n",
        "\n",
        "  # seond block\n",
        "  c2=Conv2D(128,(7,7),activation='relu')(m1)\n",
        "  m2=MaxPooling2D(64,(2,2),padding='same')(c2)\n",
        "\n",
        "  #third block\n",
        "  c3=Conv2D(128,(4,4),activation='relu')(m2)\n",
        "  m3=MaxPooling2D(64,(2,2),padding='same')(c3)\n",
        "\n",
        "\n",
        "\n",
        "  #convolution and dense layer towards the end\n",
        "  c4=Conv2D(256,(4,4),activation='relu')(m3)\n",
        "  f1=Flatten()(c4)\n",
        "  d1=Dense(4096,activation='sigmoid')(f1)\n",
        "  return Model(inputs=[inp],outputs=[d1],name=\"embedding\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SOg3wG84DMTm",
        "outputId": "e9bdfc03-66d7-4fd4-d9e0-86117d89dc72"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Model: \"embedding\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " input_image (InputLayer)    [(None, 100, 100, 3)]     0         \n",
            "                                                                 \n",
            " conv2d_1 (Conv2D)           (None, 91, 91, 64)        19264     \n",
            "                                                                 \n",
            " max_pooling2d (MaxPooling2  (None, 46, 46, 64)        0         \n",
            " D)                                                              \n",
            "                                                                 \n",
            " conv2d_2 (Conv2D)           (None, 40, 40, 128)       401536    \n",
            "                                                                 \n",
            " max_pooling2d_1 (MaxPoolin  (None, 20, 20, 128)       0         \n",
            " g2D)                                                            \n",
            "                                                                 \n",
            " conv2d_3 (Conv2D)           (None, 17, 17, 128)       262272    \n",
            "                                                                 \n",
            " max_pooling2d_2 (MaxPoolin  (None, 9, 9, 128)         0         \n",
            " g2D)                                                            \n",
            "                                                                 \n",
            " conv2d_4 (Conv2D)           (None, 6, 6, 256)         524544    \n",
            "                                                                 \n",
            " flatten (Flatten)           (None, 9216)              0         \n",
            "                                                                 \n",
            " dense (Dense)               (None, 4096)              37752832  \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 38960448 (148.62 MB)\n",
            "Trainable params: 38960448 (148.62 MB)\n",
            "Non-trainable params: 0 (0.00 Byte)\n",
            "_________________________________________________________________\n"
          ]
        }
      ],
      "source": [
        "embedding=make_embedding()\n",
        "embedding.summary()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "W9THhqitE3NH"
      },
      "outputs": [],
      "source": [
        "class L1Dist(Layer):\n",
        "\n",
        "  #init method-inheritance\n",
        "  def __init__(self,**kwargs):\n",
        "    super().__init__()\n",
        "\n",
        "  def call(self,input_embedding,validation_embedding):\n",
        "    return tf.math.abs(input_embedding-validation_embedding)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bCRSLuD_O4JU"
      },
      "outputs": [],
      "source": [
        "l1=L1Dist()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "N-bZelCgPjzs"
      },
      "outputs": [],
      "source": [
        "def make_siamese_model():\n",
        "\n",
        "  #anchor image in the network\n",
        "  input_img=Input(name=\"input image\",shape=(100,100,3))\n",
        "\n",
        "\n",
        "  #validation image in the network\n",
        "  valid_img=Input(name=\"validation image\",shape=(100,100,3))\n",
        "\n",
        "  siamese_layer=L1Dist()\n",
        "  siamese_layer._name='distance'\n",
        "  distances=siamese_layer(embedding(input_img),embedding(valid_img))\n",
        "\n",
        "  classifier=Dense(1,activation='sigmoid')(distances)\n",
        "\n",
        "  return Model(inputs=[input_img,valid_img],outputs=classifier,name=\"siamese_model\")\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ptHe_oEubWwX"
      },
      "outputs": [],
      "source": [
        "siamese_model=make_siamese_model()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "E_QyaA1HPkLx"
      },
      "outputs": [],
      "source": [
        "# loss function\n",
        "binary_cross=tf.losses.BinaryCrossentropy()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "leT5HFB3ZMsq"
      },
      "outputs": [],
      "source": [
        "opt=tf.keras.optimizers.Adam(1e-4)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9pjFM6QyZbwy"
      },
      "outputs": [],
      "source": [
        "# Establishing ckeckpoints\n",
        "checkpoint_dir='./training_checkpoint'\n",
        "checkpoint_prefix=os.path.join(checkpoint_dir,'ckpt')\n",
        "checkpoint=tf.train.Checkpoint(opt=opt,siamese_model=siamese_model)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9atgSZe6i3in"
      },
      "outputs": [],
      "source": [
        "test_batch=train_data.as_numpy_iterator()\n",
        "batch1=test_batch.next()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yJmnV6X0jOl3"
      },
      "outputs": [],
      "source": [
        "x=batch1[:2]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TfJOZ7dVkhTJ",
        "outputId": "38ba80c4-782e-4bd9-c3b9-aa90d33763c3"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(2, 16, 100, 100, 3)"
            ]
          },
          "execution_count": 40,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.array(x).shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8LYEkeBBkZlx",
        "outputId": "f62c54b8-bb8f-4173-d17e-c093561693fa"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([1., 0., 0., 0., 1., 1., 0., 1., 1., 0., 1., 0., 0., 0., 1., 0.])"
            ]
          },
          "execution_count": 41,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "y=batch1[2]\n",
        "y"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Jve6uBfJhhtr"
      },
      "outputs": [],
      "source": [
        "# training starts\n",
        "@tf.function\n",
        "def train_step(batch):\n",
        "\n",
        "  with tf.GradientTape() as tape:\n",
        "    x=batch[:2]\n",
        "    y=batch[2]\n",
        "# compiles a function into ca cllable tensorflow graph\n",
        "    y_hat=siamese_model(x,training=True)\n",
        "    # calculate loss\n",
        "    loss=binary_cross(y,y_hat)\n",
        "  print(loss)\n",
        "\n",
        "  # calculate gradients\n",
        "  grad=tape.gradient(loss,siamese_model.trainable_variables)\n",
        "\n",
        "  # update the weights\n",
        "  opt.apply_gradients(zip(grad,siamese_model.trainable_variables))\n",
        "\n",
        "  return loss\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ueA-tzwXhwPZ"
      },
      "outputs": [],
      "source": [
        "def train(data,EPOCHS):\n",
        "  # loop through every batch\n",
        "  for epoch in range(1,EPOCHS+1):\n",
        "\n",
        "    # progbar=\n",
        "    # loop through each batch\n",
        "    for idx,batch in enumerate(train_data):\n",
        "      # run train step here\n",
        "      train_step(batch)\n",
        "\n",
        "    if epoch%10==0:\n",
        "      checkpoint.save(file_prefix=checkpoint_prefix)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "OdHLXiR5hwLY",
        "outputId": "36452ca2-0e0e-42e3-f1b5-24926d4d5328"
      },
      "outputs": [
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Tensor(\"binary_crossentropy/weighted_loss/value:0\", shape=(), dtype=float32)\n",
            "Tensor(\"binary_crossentropy/weighted_loss/value:0\", shape=(), dtype=float32)\n",
            "Tensor(\"binary_crossentropy/weighted_loss/value:0\", shape=(), dtype=float32)\n"
          ]
        }
      ],
      "source": [
        "\n",
        "\n",
        "EPOCHS=10\n",
        "train(train_data,EPOCHS)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KBT87r9E6qw-"
      },
      "outputs": [],
      "source": [
        "test_input,test_val,y_true=test_data.as_numpy_iterator().next()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DmiXwfUB7akO"
      },
      "outputs": [],
      "source": [
        "y_hat=siamese_model.predict([test_input,test_val])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rfUPuF4U9yVr"
      },
      "outputs": [],
      "source": [
        "y_hat"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iGo-twOq98i6"
      },
      "outputs": [],
      "source": [
        "[1 if prediction>0.5 else 0 for prediction in y_hat]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sF_znKKE-Y7E"
      },
      "outputs": [],
      "source": [
        "y_true"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7VoFSKMR-ghz"
      },
      "outputs": [],
      "source": [
        "# calculating metrics\n",
        "\n",
        "m=Recall()"
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "gpuType": "T4",
      "provenance": [],
      "toc_visible": true,
      "mount_file_id": "1g0agL1b88FI-nwMDMlG7vzFfiXKGKRIJ",
      "authorship_tag": "ABX9TyOc8sfJKGFOiVHzfz44y4fV",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}